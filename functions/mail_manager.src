import_code("/config.src")

// Processes a list of mail results and extracts the subject and body from each email.
//
// @param {Array<String>} mail_result_list - A list of strings, where each string represents a complete email.
// @return {Array<Map<String, String>>} - A list of maps, where each map contains the "subject" and "body" of an email.
extract_subject_body_map_list = function(mail_result_list)
    subject_body_map_list = []
    for mail_result in mail_result_list
        subject = mail_result.matches("Subject: (.+)").values[0][9:]
        body = mail_result.split(char(10))[2:].join(char(10))
        subject_body_map_list.push({"subject": subject, "body": body})
    end for
    return subject_body_map_list
end function

// Determines the type of mission based on the provided body text and extracts relevant information.
// 
// @param {String} body_text - The text of the email body to analyze.
// @return {Map<String, String>|null} - Returns a map containing the type of mission and relevant details if a match is found. Returns null if no relevant mission type is identified.
classify_mission_type = function(body_text)
    is_get_any_credentials = body_text.is_match("The client wants the login credentials of any user on the remote machine\."+char(10)+"The remote ip of the victim is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>\. It's important that you access the correct machine behind the public ip\. The victim's ip LAN is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>")
    if is_get_any_credentials then
        info_list = body_text.matches("<b>[^<]+<\/b>").values
        return {"type": "a_get_any_credentials", "public_ip": info_list[0][3:-4], "lan_ip": info_list[1][3:-4]}
    end if
    
    is_get_specific_credentials = body_text.is_match("The client wants the login credentials of the user <b>[^<]+<\/b>\."+char(10)+"The remote ip of the victim is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>\. It's important that you access the correct machine behind the public ip\. The victim's ip LAN is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>")
    if is_get_specific_credentials then
        info_list = body_text.matches("<b>[^<]+<\/b>").values
        return {"type": "b_get_specific_credentials", "user": info_list[0][3:-4], "public_ip": info_list[1][3:-4], "lan_ip": info_list[2][3:-4]}
    end if

    is_change_before_police_record = body_text.is_match("The client wants to modify the information of a police record\."+char(10)+"The remote ip of the victim is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>"+char(10)+char(10)+"The record to modify belongs to: <b>[^<]+<\/b>"+char(10)+"The client wants to modify the charge of <b>[^<]+<\/b> so that the date of the crime is \d{1,3} years before it was committed\.")
    if is_change_before_police_record then
        info_list = body_text.matches("<b>[^<]+<\/b>").values
        info2_list = body_text.matches(" \d{1,3} ").values
        return {"type": "c_change_before_police_record", "public_ip": info_list[0][3:-4], "user": info_list[1][3:-4], "record_type": info_list[2][3:-4], "year_before": info2_list[0][1:-1]}
    end if

    is_add_police_record = body_text.is_match("The client wants to modify the information of a police record\."+char(10)+"The remote ip of the victim is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>"+char(10)+char(10)+"The record to modify belongs to: <b>[^<]+<\/b>"+char(10)+"The client wants to add the charge of <b>[^<]+<\/b> in the year \d{4}\. To avoid raising suspicion, you only have to add the indicated crime\.")
    if is_add_police_record then
        info_list = body_text.matches("<b>[^<]+<\/b>").values
        info2_list = body_text.matches("\d{4}").values
        return {"type": "d_add_police_record", "public_ip": info_list[0][3:-4], "user": info_list[1][3:-4], "record_type": info_list[2][3:-4], "year": info2_list[0]}
    end if

    is_delete_police_record = body_text.is_match("The client wants to modify the information of a police record\."+char(10)+"The remote ip of the victim is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>"+char(10)+char(10)+"The record to modify belongs to: <b>[^<]+<\/b>"+char(10)+"The client wants to delete the charge of <b>[^<]+<\/b>\. To avoid raising suspicion, you only have to eliminate the indicated crime, do not eliminate any other\.")
    if is_delete_police_record then
        info_list = body_text.matches("<b>[^<]+<\/b>").values
        return {"type": "e_delete_police_record", "public_ip": info_list[0][3:-4], "user": info_list[1][3:-4], "record_type": info_list[2][3:-4]}
    end if

    is_delete_police_record_completely = body_text.is_match("The client wants to modify the information of a police record\."+char(10)+"The remote ip of the victim is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>"+char(10)+char(10)+"The record to modify belongs to: <b>[^<]+<\/b>"+char(10)+"The client wants to delete the record completely\.")
    if is_delete_police_record_completely then
        info_list = body_text.matches("<b>[^<]+<\/b>").values
        return {"type": "f_delete_police_record_completely", "public_ip": info_list[0][3:-4], "user": info_list[1][3:-4]}
    end if

    is_change_academic_record_one_point = body_text.is_match("Client wants to change some grades in his academic record\. The remote ip of the victim is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>"+char(10)+"The LAN address where the database is located is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>"+char(10)+char(10)+"If you can not access directly, you can try to access through a teacher's computer in the local network\."+char(10)+char(10)+"The record to modify belongs to: <b>[^<]+<\/b>\."+char(10)+"Client wants to modify the subject <b>[^<]+<\/b> to increase the academic qualification by at least one point\.")
    if is_change_academic_record_one_point then
        info_list = body_text.matches("<b>[^<]+<\/b>").values
        return {"type": "g_change_academic_record_one_point", "public_ip": info_list[0][3:-4], "lan_ip": info_list[1][3:-4], "user": info_list[2][3:-4], "record_type": info_list[3][3:-4]}
    end if

    is_change_academic_record_approved = body_text.is_match("Client wants to change some grades in his academic record\. The remote ip of the victim is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>"+char(10)+"The LAN address where the database is located is <b>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}<\/b>"+char(10)+char(10)+"If you can not access directly, you can try to access through a teacher's computer in the local network\."+char(10)+char(10)+"The record to modify belongs to: <b>[^<]+<\/b>\."+char(10)+"Client wants to modify the subject <b>[^<]+<\/b> to change the note to approved at least\.")
    if is_change_academic_record_approved then
        info_list = body_text.matches("<b>[^<]+<\/b>").values
        return {"type": "h_change_academic_record_approved", "public_ip": info_list[0][3:-4], "lan_ip": info_list[1][3:-4], "user": info_list[2][3:-4], "record_type": info_list[3][3:-4]}
    end if

    return null
end function

// Fetches and processes emails to generate a sorted list of missions.
// 
// Logs into the email account, retrieves emails, and processes them to extract mission-related information.
// It filters out emails that are not mission contracts or those indicating satisfaction with a job.
// 
// @return {Array<Map<String, String>>} - A list of mission maps, where each map contains the type of mission and relevant details. Returns an empty list if no missions are found.
fetch_and_classify_missions = function()
    metaMail = mail_login(user_mail_address, email_password)
    mails = metaMail.fetch

    mail_result_list = []
    for mail in mails
        segments = mail.split(char(10))
        mailId = segments[2][8:]
        mail_result_list.push(metaMail.read(mailId).trim)
    end for

    mission_list = []
    for subject_body_map in extract_subject_body_map_list(mail_result_list)
        if not subject_body_map["subject"] == "Mission Contract" then continue

        body_text = subject_body_map["body"]
        if body_text.is_match("The customer is satisfied with the job\. There has been an income in your account\.") then continue

        mission_list.push(classify_mission_type(body_text))
    end for
    
    mission_list.sort()
    return mission_list
end function

// Prints the mission list to the terminal
//
// @param {Array<Map<String, String>>} mission_list - A list of missions where each mission is represented as a map with details.
// @return {Void} - This function does not return a value.
print_mission_list = function(mission_list)
    if mission_list.len == 0 then
        print("No missions found.")
        return
    end if

    print("Mission List:")
    print("--------------")

    for mission in mission_list
        print("Type: " + mission["type"])
        if not mission.indexes.indexOf("public_ip") == null then print("Public IP: " + mission["public_ip"])
        if not mission.indexes.indexOf("lan_ip") == null then print("LAN IP: " + mission["lan_ip"])
        if not mission.indexes.indexOf("user") == null then print("User: " + mission["user"])
        if not mission.indexes.indexOf("record_type") == null then print("Record Type: " + mission["record_type"])
        if not mission.indexes.indexOf("year") == null then print("Year: " + mission["year"])
        if not mission.indexes.indexOf("year_before") == null then print("Years Before: " + mission["year_before"])
        print("--------------")
    end for
end function
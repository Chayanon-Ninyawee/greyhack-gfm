import_code("/config.src")

// Launches a logdeleter script on the target shell.
//
// @param {Shell} target_shell - Shell object representing the target shell where the logdeleter will be deployed.
// @param {string} target_root_password - String representing the root password of the target system.
// 
// @return {string} - A string indicating if there was an error while launching the logdeleter script.
//
// Requirements:
// - The target shell must have write permission in the /home/guest/ directory.
// - The home shell must have a file named "empty_log/system.log" in the current path.
//
// Side Effects:
// - Deletes /var/system.log
launch_log_deleter = function(target_shell, target_root_password)
    get_custom_object.target_root_password = target_root_password
    log_deleter_src = "@import_script(scripts/logdeleter.src)"
    
    if not target_shell.host_computer.File("/home/guest/").has_permission("w") then exit("[gfm] Error: Target Shell has no write permission in /home/guest/")

    empty_log_file = get_shell.host_computer.File(user_folder_path+"/empty_log/system.log")
    if empty_log_file == null then exit("[gfm] Error: can't find "+user_folder_path+"/empty_log/system.log")
    
    if not empty_log_file.chmod("o+rw") == "" then exit("[gfm] Error: can't chmod "+user_folder_path+"/empty_log/system.log")
    log_scp_result = get_shell.scp(user_folder_path + "/empty_log/system.log", "/home/guest/", target_shell)
    if not empty_log_file.chmod("o-rwx") == "" then exit("[gfm] Error: can't chmod "+user_folder_path+"/empty_log/system.log")
    if typeof(log_scp_result) == "string" then exit("[gfm] Error: There was an error while sending system.log\n--- Error Info ---\n"+log_scp_result+"\n--- End Error Info ---")

    target_shell.host_computer.touch("/home/guest/", "logdeleter.src")
    target_shell.host_computer.File("/home/guest/logdeleter.src").set_content(log_deleter_src)
    target_shell.build("/home/guest/logdeleter.src", "/home/guest/")
    target_shell.host_computer.File("/home/guest/logdeleter.src").delete()

    get_custom_object.error = "Didn't launch /home/guest/logdeleter yet!"
    target_shell.launch("/home/guest/logdeleter")
    return get_custom_object.error
end function

// Launches a logcorrupter script on the target shell.
//
// @param {Shell} target_shell - Shell object representing the target shell where the logcorrupter will be deployed.
// @param {string} target_root_password - String representing the root password of the target system.
// 
// @return {string} - A string indicating if there was an error while launching the logcorrupter script.
//
// Requirements:
// - The target shell must have write permission in the /home/guest/ directory.
//
// Side Effects:
// - Corrupts /var/system.log
launch_log_corrupter = function(target_shell, target_root_password)
    get_custom_object.target_root_password = target_root_password
    log_deleter_src = "@import_script(scripts/logcorrupter.src)"
    
    if not target_shell.host_computer.File("/home/guest/").has_permission("w") then exit("[gfm] Error: Target Shell has no write permission in /home/guest/")

    target_shell.host_computer.touch("/home/guest/", "logcorrupter.src")
    target_shell.host_computer.File("/home/guest/logcorrupter.src").set_content(log_deleter_src)
    target_shell.build("/home/guest/logcorrupter.src", "/home/guest/")
    target_shell.host_computer.File("/home/guest/logcorrupter.src").delete()

    get_custom_object.error = "Didn't launch /home/guest/logcorrupter yet!"
    target_shell.launch("/home/guest/logcorrupter")
    return get_custom_object.error
end function

// Launches a local exploiter script on the target shell.
//
// @param {Shell} target_shell - Shell object representing the target shell where the local exploiter will be deployed.
// 
// @return {File|null} - The target passwd file if successful, null otherwise.
//
// Requirements:
// - The target shell must have write permission in the /home/guest/ directory.
// - The user's folder must contain the file "metaxploit.so" in the lib directory.
//
// Side Effects:
// - Modifies file permissions for "metaxploit.so".
// - Attempts to launch the "localexploiter" script on the target shell.
launch_local_exploiter = function(target_shell)
    get_custom_object.target_passwd_file = null
    local_exploiter_src = "@import_script(scripts/localexploiter.src)"
    
    if not target_shell.host_computer.File("/home/guest/").has_permission("w") then exit("[gfm] Error: Target Shell has no write permission in /home/guest/")

    metaxploit_file = get_shell.host_computer.File(user_folder_path+"/lib/metaxploit.so")
    if metaxploit_file == null then exit("[gfm] Error: can't find "+user_folder_path+"/lib/metaxploit.so")

    if not metaxploit_file.chmod("o+rwx") == "" then exit("[gfm] Error: can't chmod "+user_folder_path+"/lib/metaxploit.so")
    log_scp_result = get_shell.scp(metaxploit_file.path, "/home/guest/", target_shell)
    if not metaxploit_file.chmod("o-rwx") == "" then exit("[gfm] Error: can't chmod "+user_folder_path+"/lib/metaxploit.so")
    if typeof(log_scp_result) == "string" then exit("[gfm] Error: There was an error while sending metaxploit.so\n--- Error Info ---\n"+log_scp_result+"\n--- End Error Info ---")

    target_shell.host_computer.touch("/home/guest/", "localexploiter.src")
    target_shell.host_computer.File("/home/guest/localexploiter.src").set_content(local_exploiter_src)
    target_shell.build("/home/guest/localexploiter.src", "/home/guest/")
    target_shell.host_computer.File("/home/guest/localexploiter.src").delete()

    get_custom_object.error = "Didn't launch /home/guest/localexploiter yet!"
    target_shell.launch("/home/guest/localexploiter")
    if not get_custom_object.error == null then; print(get_custom_object.error); return null; end if

    if get_custom_object.target_passwd_file == null then; print("Can't get target_passwd_file"); return null; end if
    return get_custom_object.target_passwd_file
end function
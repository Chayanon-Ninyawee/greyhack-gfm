import_code("/config.src")

// Converts a map of metaLib exploit information into a formatted string.
//
// This function processes a map where each key is a meta library string and its value is a list of memory exploit mappings.
// It constructs a string where each line represents a library with its version, followed by its memory-exploit mappings.
//
// @param {Map<String, Array<Map<String, String>>>} metaLibString_exploit_info_map - A map containing:
//   - "metaLibString": A string representing the meta library and its version, e.g. 'init.so-1.0.0'.
//   - "memory_exploit_map_list": A list of maps, where each map contains:
//     - "memory": A string representing the memory address.
//     - "exploit": A string representing the exploit associated with the memory address.
//
// @return {String} - A formatted string where each line represents a library and its associated memory-exploit information,
//                    with the library name and version separated by a colon, and memory-exploit pairs separated by spaces.
//                    e.g. "metaLibString: memory1,exploit1 memory2,exploit2 ...\n..."
parse_metaLibString_exploit_info_map_to_string = function(metaLibString_exploit_info_map)
    result = ""
    metaLibString_list = metaLibString_exploit_info_map.indexes
    metaLibString_list.sort
    for metaLibString in metaLibString_list
        result = result + metaLibString + ":"
        memory_exploit_map_list = metaLibString_exploit_info_map[metaLibString]
        for memory_exploit_map in memory_exploit_map_list
            result = result + " " + memory_exploit_map["memory"]+","+memory_exploit_map["exploit"]
        end for
        result = result + char(10)
    end for
    return result[:-1]
end function

// Parses a string to extract metaLib exploit information and returns a map.
//
// This function takes a string containing meta library exploit information 
// that was parse with parse_metaLib_exploit_info_list_to_string, 
// parses it, and constructs a map where each key is a meta library string 
// and its value is a list of memory exploit mappings.
//
// @param {String} string_data - 
//      A string containing meta library exploit information in the format:
//      "metaLibString: memory1,exploit1 memory2,exploit2 ...\n..."
//
// @return {Map<String, Array<Map<String, String>>>} - 
//      A map where each key is a metaLib string e.g. 'init.so-1.0.0' and the value is a list of maps. 
//      Each map contains 'memory' and 'exploit' properties.
parse_string_to_metaLibString_exploit_info_map = function(string_data)
    metaLibString_exploit_info_map = {}
    if string_data == "" or string_data == null then return metaLibString_exploit_info_map
    
    lines = string_data.split(char(10))
    for line in lines
        parts = line.split(":")
        
        metaLibString = parts[0]
        memory_exploit_info_list = parts[1].split(" ")
        
        memory_exploit_map_list = []
        for memory_exploit_info in memory_exploit_info_list
            if memory_exploit_info == "" then continue
            
            memory_exploit_parts = memory_exploit_info.split(",")
            
            memory_exploit_map = {"memory": memory_exploit_parts[0], "exploit": memory_exploit_parts[1]}
            memory_exploit_map_list.push(memory_exploit_map)
        end for
        
        metaLibString_exploit_info_map[metaLibString] = memory_exploit_map_list
    end for
    
    return metaLibString_exploit_info_map
end function

metaLib_database_file = null

// Sets up the meta library database file for the application.
//
// This function checks if the metaLib_database.txt file exists in the specified user folder. 
// If the file does not exist, it creates a new empty file. 
// It then sets the global reference to this file for further use.
//
// @return {void} - This function does not return a value. 
setup_metaLib_database = function()
    home_computer = get_shell("root", root_password).host_computer
    globals.metaLib_database_file = home_computer.File(user_folder_path+"/metaLib_database.txt")
    if metaLib_database_file == null then
        home_computer.touch(user_folder_path, "metaLib_database.txt")
        globals.metaLib_database_file = home_computer.File(user_folder_path+"/metaLib_database.txt")
    end if
    if metaLib_database_file == null then exit("[gfm] Error: Can't find "+user_folder_path+"metaLib_database.txt Even though it should")
    get_custom_object.metaLib_database_file = metaLib_database_file
end function

setup_metaLib_database()
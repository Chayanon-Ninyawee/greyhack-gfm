import_code("/config.src")

initProxy = {}
initProxy.cmd = "initProxy"
initProxy.alias = null
initProxy.args = null
initProxy.desc = "Initiate proxy server in the list (will delete unhackable NPC computer)"

initProxy.run = function(args)
    new_proxy_server_list = []

    for proxy_server in get_proxy_server_list
        if not proxy_server.key == null then continue

        if proxy_server.ssh_port == null or proxy_server.password == null then
            result = get_result_list(get_remote_metaLib_list(proxy_server.ip, proxy_server.lan_ip))
            
            root_password = null
            for shell_memory_exploit_map in result["shell"]
                shell = shell_memory_exploit_map["shell"]

                passwd_file = shell.host_computer.File("/etc/passwd")
                if not passwd_file.has_permission("r") then continue

                root_password = passwd_grabber(passwd_file, "root")
                launch_log_corrupter(shell, root_password)
                continue
            end for
            if root_password == null then continue

            new_proxy_server_list.push(proxy_server)
        else
            shell = get_shell.connect_service(proxy_server.ip, proxy_server.ssh_port, "root", proxy_server.password)
            if shell == null then exit("[gfm] Error: Can't connect to proxy server: "+proxy_server)
            if typeof(shell) == "string" then exit("[gfm] Error: Can't connect to proxy server: "+proxy_server+" Reason: "+shell)

            shell_password = {}
            shell_password.shell = shell
            shell_password.password = proxy_server.password
            shell_password_list.push(shell_password)

            proxy_server.key = encryption_key
            new_proxy_server_list.push(proxy_server)
        end if
    end for
    set_proxy_server_list(new_proxy_server_list)
end function
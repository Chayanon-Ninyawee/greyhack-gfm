// `Pure Function` — Converts a hexadecimal string to a decimal number.
//
// @param {string} hexString - The hexadecimal string to convert to a number.
// @description *@param* `string` — hexString - The hexadecimal string to convert to a number.
//
// @return {int} The decimal value represented by the hexadecimal string.
// @description *@return* `int` — The decimal value represented by the hexadecimal string.
// @description Returns -1 if the string is empty or contains invalid characters.
hexToNumber = function(hexString)
    value = 0
    for i in range(0, hexString.len-1)
        hexDigit = hexString[i]
        if hexDigit >= "0" and hexDigit <= "9" then
            digitValue = hexDigit.to_int()  // Convert '0'-'9' to 0-9
        else if hexDigit >= "A" and hexDigit <= "F" then
            digitValue = 10 + (hexDigit.code - "A".code)  // Convert 'A'-'F' to 10-15
        else if hexDigit >= "a" and hexDigit <= "f" then
            digitValue = 10 + (hexDigit.code - "a".code)  // Convert 'a'-'f' to 10-15
        else
            return -1;
        end if
        value = value * 16 + digitValue  // Accumulate the value (base-16)
    end for
    return value
end function

// `Pure Function` — Converts a hexadecimal string to a byte string.
//
// @param {string} hexString - The hexadecimal string to convert to bytes.
// @description *@param* `string` — hexString - The hexadecimal string to convert to bytes.
// 
// @return {string} The byte string represented by the hexadecimal string.
// @description *@return* `string` — The byte string represented by the hexadecimal string.
//
// @description *@throws* — Error if the input contains invalid hexadecimal characters or has odd length.
hexToBytes = function(hexString)
    if hexString.len % 2 == 1 then exit("Error in [hexToBytes]: The input string is odd.")
    bytes = ""
    i = 0
    while i < hexString.len
        hexPair = hexString[i] + hexString[i+1]  // Take two characters at a time
        byte = hexToNumber(hexPair)
        if byte == -1 then exit("Error in [hexToBytes]: Invalid hexadecimal character in input string.")
        bytes = bytes + char(byte)  // Convert to character and append
        i = i + 2
    end while
    return bytes
end function


// Check if the target path exists and is a folder
resolveFolderPath = function(targetPath, currentFolder)
    if targetPath.len == 0 then return null // Invalid path
    
    if targetPath[0] == "/" then
        // Absolute path: Start from the root
        current = currentFolder
        while not current.name == "/"
            current = current.parent
        end while
    else
        // Relative path: Start from the current folder
        current = currentFolder
    end if

    for part in targetPath.split("/")
        if part == "" then continue

        if part == ".." then
            // Move up to the parent directory
            if current.parent != null then
                current = current.parent
            else
                return null  // Can't go above the root
            end if
        else
            // Move into the specified child folder
            child = null
            for childFolder in current.get_folders
                if childFolder.name != part then continue

                child = childFolder
                break
            end for
            
            if child == null then
                return null  // Invalid path or not a folder
            end if
            current = child
        end if
    end for

    return current
end function


// Check if the target path exists and is a file
resolveFilePath = function(targetPath, currentFolder)
    if targetPath.len == 0 then return null // Invalid path

    targetFileName = targetPath.split("/")[-1]
    targetFolderPath = targetPath.split("/")[:-1].join("/")

    if targetFolderPath.len == 0 then
        folder = currentFolder
    else
        folder = resolveFolderPath(targetFolderPath, currentFolder)
    end if

    if folder == null then return null

    child = null
    for childFile in folder.get_files()
        if childFile.name != targetFileName then continue

        child = childFile
        break
    end for

    if child == null then return null  // Invalid path or not a file

    return child
end function